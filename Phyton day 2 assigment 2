1. Problem Statement:
________________________________________
•	Find all the subsets from a set of numbers whose sum is zero.
•	Constraint: Subset size must be 5
•	Set={-12, -3, -6, 7, 2, -2, 6, 3, 9, -7, -5, -8, 1, 11, -9, -4}


def find_subsets_with_sum_zero(nums):
    def backtrack(start, target, path):
        if target == 0 and len(path) == 5:
            result.append(path[:])
            return
        if len(path) > 5 or target < 0 or start == len(nums):
            return

        for i in range(start, len(nums)):
            path.append(nums[i])
            backtrack(i + 1, target - nums[i], path)
            path.pop()

    result = []
    nums.sort()  # Sorting the input set for better performance
    backtrack(0, 0, [])
    return result

# Set of numbers
numbers_set = [-12, -3, -6, 7, 2, -2, 6, 3, 9, -7, -5, -8, 1, 11, -9, -4]

# Find all subsets of size 5 with a sum of zero
subsets = find_subsets_with_sum_zero(numbers_set)

# Print the subsets
for subset in subsets:
    print(subset)

2. Problem Statement:
________________________________________
•	Find all the subsets from a set of numbers whose sum is zero.
•	Constraint: Subset size must be 3 to 6 only
•	Set={-12, -3, -6, 7, 2, -2, 6, 3, 9, -7, -5, -8, 1, 11, -9, -4}


def find_subsets_with_sum_zero(nums):
    def backtrack(start, target, path):
        if target == 0 and 3 <= len(path) <= 6:
            result.append(path[:])
            return
        if len(path) > 6 or target < 0 or start == len(nums):
            return

        for i in range(start, len(nums)):
            path.append(nums[i])
            backtrack(i + 1, target - nums[i], path)
            path.pop()

    result = []
    nums.sort()  # Sorting the input set for better performance
    backtrack(0, 0, [])
    return result

# Set of numbers
numbers_set = [-12, -3, -6, 7, 2, -2, 6, 3, 9, -7, -5, -8, 1, 11, -9, -4]

# Find all subsets of size 3 to 6 with a sum of zero
subsets = find_subsets_with_sum_zero(numbers_set)

# Print the subsets
for subset in subsets:
    print(subset)

